<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby on Rails | 武眉博]]></title>
  <link href="http://huobazi.github.com/blog/tag/ruby-on-rails/atom.xml" rel="self"/>
  <link href="http://huobazi.github.com/"/>
  <updated>2013-07-14T10:46:41+08:00</updated>
  <id>http://huobazi.github.com/</id>
  <author>
    <name><![CDATA[Marble Wu]]></name>
    <email><![CDATA[huobazi@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用AjaxUpload和Carrierwave在Rails && Mongoid中批量上传图片']]></title>
    <link href="http://huobazi.github.com/blog/2012/08/15/ajaxupload-with-rail-carrierwave-on-mongodb/"/>
    <updated>2012-08-15T15:34:00+08:00</updated>
    <id>http://huobazi.github.com/blog/2012/08/15/ajaxupload-with-rail-carrierwave-on-mongodb</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/valums/file-uploader">file-uploader</a>是一个用 Javascrit 编写的文件上传 Libary,在这里我使用<a href="https://github.com/jnicklas/carrierwave">CarrierWave</a>和 <a href="https://github.com/mongoid/mongoid">Mongoid</a> 来完成多文件的无刷新上传功能</p>

<h2>RubyGems</h2>

<p><code>ruby
gem 'mongoid', '3.0.4'
gem 'carrierwave', '0.6.2'
gem 'carrierwave-mongoid', :github =&gt; 'jnicklas/carrierwave-mongoid', :branch =&gt; 'mongoid-3.0'
gem 'mini_magick', '3.4'
gem 'rack-raw-upload', '1.1.0'
</code></p>

<h2>Model</h2>

<p>```ruby
class Screenshot
  include Mongoid::Document
  include Mongoid::Timestamps::Created
  include Rails.application.routes.url_helpers</p>

<p>  attr_accessible :image
  field :image</p>

<p>  mount_uploader :image, ScreenshotUploader</p>

<p>end
```</p>

<!--more-->


<h2>Controller</h2>

<p>```ruby
class ScreenshotsController &lt; ApplicationController</p>

<p>  def index</p>

<pre><code>@screenshots = Screenshot.all.desc(:created_at)

respond_to do |format|
  format.html # index.html.erb    
  format.js{ render :layout =&gt; false}
end
</code></pre>

<p>  end</p>

<p>  def create</p>

<pre><code>file = params[:qqfile].is_a?(ActionDispatch::Http::UploadedFile) ? params[:qqfile] : params[:file]
@screenshot = Screenshot.new
@screenshot.image = file
if @screenshot.save
  render json: { success: true, src: @screenshot.to_json }
else
  render json: @screenshot.errors.to_json
end
</code></pre>

<p>  end</p>

<p>  def destroy</p>

<pre><code>@screenshot = Screenshot.find(params[:id])
@screenshot.destroy

respond_to do |format|
  format.html { redirect_to screenshots_path }
  format.js{ 
    @screenshots = Screenshot.all.desc(:created_at)
    render :layout =&gt; false
  }
end
</code></pre>

<p>  end</p>

<p>end
```</p>

<h2>Uploader</h2>

<p>```ruby</p>

<h1>encoding: utf-8</h1>

<p>require &ldquo;digest/md5&rdquo;
require &lsquo;carrierwave/processing/mini_magick&rsquo;</p>

<p>class ScreenshotUploader &lt; CarrierWave::Uploader::Base
  include CarrierWave::MiniMagick</p>

<p>  storage :file</p>

<p>  # Override the directory where uploaded files will be stored.
  def store_dir</p>

<pre><code>"uploads/#{model.class.to_s.underscore}/#{mounted_as}/#{model.id}"
</code></pre>

<p>  end</p>

<p>  process :convert => &lsquo;png&rsquo;</p>

<p>  # Create different versions of your uploaded files:
  version :thumb do</p>

<pre><code>process :resize_to_fill =&gt; [120, 120]
</code></pre>

<p>  end</p>

<p>  # Add a white list of extensions which are allowed to be uploaded.
  def extension_white_list</p>

<pre><code>%w(jpg jpeg gif png)
</code></pre>

<p>  end</p>

<p>  # Override the filename of the uploaded files:
  # see <a href="http://huacnlee.com/blog/carrierwave-upload-store-file-name-config/">http://huacnlee.com/blog/carrierwave-upload-store-file-name-config/</a>
  def filename</p>

<pre><code>if super.present?
  # current_path 是 Carrierwave 上传过程临时创建的一个文件，有时间标记，所以它将是唯一的
  @name ||= Digest::MD5.hexdigest(File.dirname(current_path))
  "#{@name}.#{file.extension.downcase}"
end
</code></pre>

<p>  end
end
```</p>

<h2>Javascript</h2>

<p>```javascript
  $(document).ready(function(){</p>

<pre><code>var uploader = new qq.FileUploader({
  debug: true,
  allowedExtensions: ['jpg', 'jpeg', 'png', 'gif'],
  sizeLimit: 1048576, // max size: 1MB
  minSizeLimit: 0, // min size
  multiple: true,
  element: document.getElementById('file-uploader'),
  action: '&lt;%= screenshots_path %&gt;',
  onComplete: function(id, fileName, responseJSON){
    $.getScript("&lt;%= screenshots_path %&gt;");
  },
  onSubmit: function(id, fileName) {
    uploader.setParams({
      xx: "xx",
      yy: 'yy',
      zz: 'zz',       
      authenticity_token: "&lt;%= form_authenticity_token.to_s %&gt;"
    });
  }
});
</code></pre>

<p>});
```
你可以在 <a href="https://github.com/huobazi/ajax-upload-with-carrierwave-mongoid">https://github.com/huobazi/ajax-upload-with-carrierwave-mongoid</a>下载完整的示例代码</p>
]]></content>
  </entry>
  
</feed>
