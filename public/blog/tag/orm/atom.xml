<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ORM | 武眉博]]></title>
  <link href="http://huobazi.github.com/blog/tag/orm/atom.xml" rel="self"/>
  <link href="http://huobazi.github.com/"/>
  <updated>2013-07-14T11:11:48+08:00</updated>
  <id>http://huobazi.github.com/</id>
  <author>
    <name><![CDATA[Marble Wu]]></name>
    <email><![CDATA[huobazi@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何判断一个类型是nullable类型，并得知它的原始类型]]></title>
    <link href="http://huobazi.github.com/blog/2009/07/30/how-to-determine-whether-an-type-is-nullable-and-get-the-underlying-type/"/>
    <updated>2009-07-30T20:04:00+08:00</updated>
    <id>http://huobazi.github.com/blog/2009/07/30/how-to-determine-whether-an-type-is-nullable-and-get-the-underlying-type</id>
    <content type="html"><![CDATA[<p>有些时候我们需要判断某个类型是否是Nullable类型，并且可能需要知道它的原始类型，<br />比如在做些ORM相关工作时，就需要这方面的应用，如下代码使用可以实现这个要求</p>


<p><!--more--></p>


<pre>class Program
    {
        static void Main( string[] args )
        {
            RL( );

            Type type =  typeof( DateTime? );
            Type originalType;

            if ( IsNullable( type , out originalType ) )
            {
                WL( originalType.ToString( ) );
            }
            else
            {
                WL( "NOT Nullable" );
            }

            type =  typeof( DateTime );

            if ( IsNullable( type , out originalType ) )
            {
                WL( originalType.ToString( ) );
            }
            else
            {
                WL( "NOT Nullable" );
            }

            RL( );
        }

        private static bool IsNullable( Type p , out Type originalType )
        {
            bool result = false;

            if ( p.IsGenericType &amp;&amp; p.GetGenericTypeDefinition( ) == typeof( Nullable&lt;&gt; ) )
            {
                result = true;
                originalType = p.GetGenericArguments( )[0];
            }
            else
            {
                originalType = null;
            }

            return result;
        }

        #region Helper methods

        private static void WL( object text , params object[] args )
        {
            Console.WriteLine( text.ToString( ) , args );
        }

        private static void RL( )
        {
            Console.ReadLine( );
        }

        private static void Break( )
        {
            System.Diagnostics.Debugger.Break( );
        }

        #endregion
    }

<pre></pre><p></p></pre>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DbEntry.Net---又一个国产开源ORM数据访问及 WEB 框架]]></title>
    <link href="http://huobazi.github.com/blog/2008/01/31/dbentry/"/>
    <updated>2008-01-31T10:12:00+08:00</updated>
    <id>http://huobazi.github.com/blog/2008/01/31/dbentry</id>
    <content type="html"><![CDATA[<p>今天去逛<a href="http://www.codeplex.com" target="_blank">CodePlex</a>发现这个东西<br /><br />链接到<a href="http://www.javaeye.com/" target="_blank">JavaEye</a>的<a href="http://llf.javaeye.com/" target="_blank">blog</a>，作者：<span id="AuthorLabel">梁利锋</span><br /><br />中文描述：<font face="Verdana"><a href="http://llf.hanzify.org/llf/show.asp?id=555">http://llf.hanzify.org/llf/show.asp?id=555</a><br /><br /></font><font face="Verdana"><strong>Features:</strong><br /><br />FluentInterface query syntax </font></p>


<ul>
<li>RoR ActiveRecord style syntax<br />
</li>
<li>Ambient transaction<br />
</li>
<li>Dynamic object<br />
</li>
<li>Partial update<br />
</li>
<li>1:1 1:Many Many:Many relations<br />
</li>
<li>Auto create table<br />
</li>
<li>Anti sql injection<br />
</li>
<li>Multiple data source<br />
</li>
<li>Object validation<br />
</li>
<li>Paged selector and collection<br />
</li>
<li>Nullable support<br />
</li>
<li>DbEntryDataSource<br />
</li>
<li>ASP.NET 2.0 Membership support<br />
</li>
<li>Built-in Cache Support<br />
</li>
<li>Ruby On Rails style MVC framework<br />
</li>
<li>High performance, almost same as using ADO.NET directly<br />
</li>
<li>Lightwight, the binary file only about 268KB</li>
</ul>


<ul><li><strong>Rails Style MVC</strong></li></ul>


<ol>
<ol>
<li>
<a href="http://www.codeplex.com/DbEntry/Wiki/View.aspx?title=Rails%20Getting%20Started&amp;referringTitle=Home">Getting Started</a><br />
</li>
<li>
<a href="http://www.codeplex.com/DbEntry/Wiki/View.aspx?title=Scaffolding&amp;referringTitle=Home">Scaffolding</a><br />
</li>
<li>
<a href="http://www.codeplex.com/DbEntry/Wiki/View.aspx?title=Controller&amp;referringTitle=Home">Controller</a><br />
</li>
<li>
<a href="http://www.codeplex.com/DbEntry/Wiki/View.aspx?title=Viewer&amp;referringTitle=Home">Viewer</a><br />
</li>
<li>
<a href="http://www.codeplex.com/DbEntry/Wiki/View.aspx?title=Rails%20Configuration&amp;referringTitle=Home">Configuration</a><br />
</li>
<li><a href="http://www.codeplex.com/DbEntry/Wiki/View.aspx?title=Rails%20Style%20MVC%20Deployment&amp;referringTitle=Home">Deployment</a></li>
</ol>
<p></p>
</ol>


<br /><p>另外还有一些不错的东西比如他的 <strong>Rails Style MVC</strong> 和<strong><a href="http://www.codeplex.com/DbEntry/Wiki/View.aspx?title=Tools&amp;referringTitle=Home" target="_blank"><strong>TemplateBuilder</strong>  </a></strong>还有 <a href="http://www.codeplex.com/DbEntry/Wiki/View.aspx?title=HtmlBuilder&amp;referringTitle=Home" target="_blank"><strong>HtmlBuilder</strong></a><br /><br />看了看并没有<a href="http://www.codeplex.com/nbear" target="_blank">Nbear</a>那样类似Linq的查询支持.<br /><br />令人欣慰的是这个东西一直从.net1.1做到现在，而且就一个人开发，从<a href="http://www.codeplex.com" target="_blank">codeplex</a>上来看，最近还有代码签入.<br /><br /><font face="Verdana"><a href="http://www.codeplex.com/DbEntry/SourceControl/ListDownloadableCommits.aspx">http://www.codeplex.com/DbEntry/SourceControl/ListDownloadableCommits.aspx</a><br /><br /></font><br /><br /><strong>最后贴一下地址：<font face="Verdana"><a href="http://www.codeplex.com/DbEntry">http://www.codeplex.com/DbEntry</a></font></strong></p>


<br />

]]></content>
  </entry>
  
</feed>
