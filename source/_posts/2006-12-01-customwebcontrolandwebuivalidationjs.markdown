---
layout: post
title: 在写自定义控件时，如果控件某个属性允许被验证控件验证，需要注意微软在 WebUIValidation.js内的实现。
comments: true
date: 2006-12-01 16:46
categories:
- ASP.NET
- Asp.net
- 自定义控件
---

<p>微软在WebUIValidation.js(System.Web的资源文件内自己找工具看吧)<br />内有如下代码：<br /></p>
<div style="BORDER-RIGHT: #cccccc 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: #cccccc 1px solid; PADDING-LEFT: 4px; FONT-SIZE: 13px; PADDING-BOTTOM: 4px; BORDER-LEFT: #cccccc 1px solid; WIDTH: 77.29%; WORD-BREAK: break-all; PADDING-TOP: 4px; BORDER-BOTTOM: #cccccc 1px solid; HEIGHT: 310px; BACKGROUND-COLOR: #eeeeee">
<span style="COLOR: #0000ff">function</span><span style="COLOR: #000000"> ValidatorGetValue(id) {<br />    </span><span style="COLOR: #0000ff">var</span><span style="COLOR: #000000"> control;<br />    control </span><span style="COLOR: #000000">=</span><span style="COLOR: #000000"> document.getElementById(id);<br />    </span><span style="COLOR: #0000ff">if</span><span style="COLOR: #000000"> (</span><span style="COLOR: #0000ff">typeof</span><span style="COLOR: #000000">(control.value) </span><span style="COLOR: #000000">==</span><span style="COLOR: #000000"> </span><span style="COLOR: #000000">"</span><span style="COLOR: #000000">string</span><span style="COLOR: #000000">"</span><span style="COLOR: #000000">) {<br />        </span><span style="COLOR: #0000ff">return</span><span style="COLOR: #000000"> control.value;<br />    }<br />    </span><span style="COLOR: #0000ff">return</span><span style="COLOR: #000000"> ValidatorGetValueRecursive(control);<br />}<br /></span><span style="COLOR: #0000ff">function</span><span style="COLOR: #000000"> ValidatorGetValueRecursive(control)<br />{<br />    </span><span style="COLOR: #0000ff">if</span><span style="COLOR: #000000"> (</span><span style="COLOR: #0000ff">typeof</span><span style="COLOR: #000000">(control.value) </span><span style="COLOR: #000000">==</span><span style="COLOR: #000000"> </span><span style="COLOR: #000000">"</span><span style="COLOR: #000000">string</span><span style="COLOR: #000000">"</span><span style="COLOR: #000000"> </span><span style="COLOR: #000000">&amp;&amp;</span><span style="COLOR: #000000"> (control.type </span><span style="COLOR: #000000">!=</span><span style="COLOR: #000000"> </span><span style="COLOR: #000000">"</span><span style="COLOR: #000000">radio</span><span style="COLOR: #000000">"</span><span style="COLOR: #000000"> </span><span style="COLOR: #000000">||</span><span style="COLOR: #000000"> control.checked </span><span style="COLOR: #000000">==</span><span style="COLOR: #000000"> </span><span style="COLOR: #0000ff">true</span><span style="COLOR: #000000">)) {<br />        </span><span style="COLOR: #0000ff">return</span><span style="COLOR: #000000"> control.value;<br />    }<br />    </span><span style="COLOR: #0000ff">var</span><span style="COLOR: #000000"> i, val;<br />    </span><span style="COLOR: #0000ff">for</span><span style="COLOR: #000000"> (i </span><span style="COLOR: #000000">=</span><span style="COLOR: #000000"> </span><span style="COLOR: #000000">0</span><span style="COLOR: #000000">; i</span><span style="COLOR: #000000">&lt;</span><span style="COLOR: #000000">control.childNodes.length; i</span><span style="COLOR: #000000">++</span><span style="COLOR: #000000">) {<br />        val </span><span style="COLOR: #000000">=</span><span style="COLOR: #000000"> ValidatorGetValueRecursive(control.childNodes[i]);<br />        </span><span style="COLOR: #0000ff">if</span><span style="COLOR: #000000"> (val </span><span style="COLOR: #000000">!=</span><span style="COLOR: #000000"> </span><span style="COLOR: #000000">""</span><span style="COLOR: #000000">) </span><span style="COLOR: #0000ff">return</span><span style="COLOR: #000000"> val;<br />    }<br />    </span><span style="COLOR: #0000ff">return</span><span style="COLOR: #000000"> </span><span style="COLOR: #000000">""</span><span style="COLOR: #000000">;<br />}</span>
</div>
<p><br />当自定义控件为符合控件，比如两个或多个DropDownList组合而成<br />而有一个Value属性来返回这几个DropDownList的返回选项，并且设置了<span style="COLOR: #000000"><strong><font color="#0000ff">ValidationPropertyAttribute去验证某个属性，如：</font></strong><br /></span><strong style="COLOR: #0000ff">[ValidationPropertyAttribute( "Value" )]<br /><span style="COLOR: #000000">当使用验证控件验证的时候，由于上面脚本在控件没有客户端value的时候返回的为第一个value不为空的ChildNode的value<br />值，这样用来验证，可能不是我们所需要的。<br />比如我需要非空验证控件来验证我的自定义控件所有的DropDownList都必须被选择时候，如果第一个有了选择，则该脚本认为验证通过了，叶面可以PostBack然而，在服务器端Page.IsValidata属性是false的。<br />我用了一个非常ugly的方法，在控件外层放一个父容器（可以通过override TagKey 来指定）span<br />在每个DropDownList的客户端onchange的时候 判断 如果 任一个没有选择，那么置span的value = ‘’；<br />当全部选择的时候再将span.value = 实际的值 ，这样就不会出现客户端验证通过，然而服务器端验证没有通过才出来ErrorMessage的情况了。<br /><br />但是总觉得 这样非常的ugly,如果有其他朋友也遇到过这样的问题，欢迎讨论。</span></strong></p>				
